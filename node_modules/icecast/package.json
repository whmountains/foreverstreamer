{
  "name": "icecast",
  "description": "NodeJS module for parsing and/or injecting metadata with SHOUTcast/Icecast radio streams",
  "version": "1.3.1",
  "author": {
    "name": "Nathan Rajlich",
    "email": "nathan@tootallnate.net"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/TooTallNate/node-icecast.git"
  },
  "license": "MIT",
  "keywords": [
    "shoutcast",
    "icecast",
    "radio",
    "internet",
    "metadata",
    "stream"
  ],
  "dependencies": {
    "debug": "*",
    "stream-parser": "*",
    "readable-stream": "*"
  },
  "devDependencies": {
    "mocha": "*"
  },
  "main": "./index.js",
  "scripts": {
    "test": "mocha --reporter spec"
  },
  "engines": {
    "node": "*"
  },
  "readme": "node-icecast\n============\n### NodeJS module for parsing and/or injecting metadata into SHOUTcast/Icecast radio streams\n[![Build Status](https://secure.travis-ci.org/TooTallNate/node-icecast.png)](http://travis-ci.org/TooTallNate/node-icecast)\n\nThis module offers a `Reader` class for retrieving the raw audio data and\nparsing the metadata from a [SHOUTcast][] or [Icecast][] broadcast.\n\nThere's also a `Writer` class that allows you to inject your own metadata into a\ndata stream, which can then be displayed by another Icecast client (like VLC).\n\nBut you'll probably be most interested in the `Client` class that builds off of\nnode's core `http` module, except this version works with servers that return\nan **ICY** HTTP version, and automatically sends an \"Icy-MetaData: 1\" HTTP header\nto notify the server that we want metadata, and finally it returns a `Reader`\ninstance in the \"response\" event, therefore the \"res\" object also emits \"metadata\"\nevents. See the example below to see how it works.\n\nA good use case for this module is for HTML5 web apps that host to radio streams;\nthe `<audio>` tag doesn't know how to deal with the extra metadata and it is\nimpossible to extract (on the client-side). But a WebSocket connection could be\nused in conjunction with this module to provide those `metadata` events to a\nweb browser, for instance.\n\nInstallation\n------------\n\nInstall with `npm`:\n\n``` bash\n$ npm install icecast\n```\n\n\nExample\n-------\n\nHere's a basic example of using the HTTP `Client` to connect to a remote Icecast\nstream, pipe the clean audio data to _stdout_, and print the HTTP response headers\nand metadata events to _stderr_:\n\n``` javascript\nvar lame = require('lame');\nvar icecast = require('icecast');\nvar Speaker = require('speaker');\n\n// URL to a known Icecast stream\nvar url = 'http://firewall.pulsradio.com';\n\n// connect to the remote stream\nicecast.get(url, function (res) {\n\n  // log the HTTP response headers\n  console.error(res.headers);\n\n  // log any \"metadata\" events that happen\n  res.on('metadata', function (metadata) {\n    var parsed = icecast.parse(metadata);\n    console.error(parsed);\n  });\n\n  // Let's play the music (assuming MP3 data).\n  // lame decodes and Speaker sends to speakers!\n  res.pipe(new lame.Decoder())\n     .pipe(new Speaker());\n});\n```\n\n\nAPI\n---\n\n  - [Client()](#client)\n  - [request()](#request)\n  - [get()](#get)\n  - [Reader()](#reader)\n  - [Writer()](#writer)\n    - [.queue()](#writerqueuemetadata)\n  - [parse()](#parse)\n  - [stringify()](#stringify)\n\n## Client()\n\nThe `Client` class is a subclass of the `http.ClientRequest` object.\n\nIt adds a stream preprocessor to make \"ICY\" responses work. This is only needed\nbecause of the strictness of node's HTTP parser. I'll volley for ICY to be\nsupported (or at least configurable) in the http header for the JavaScript\nHTTP rewrite (v0.12 of node?).\n\nThe other big difference is that it passes an `icecast.Reader` instance\ninstead of a `http.ClientResponse` instance to the \"response\" event callback,\nso that the \"metadata\" events are automatically parsed and the raw audio stream\nit output without the Icecast bytes.\n\nAlso see the [`request()`](#request) and [`get()`](#get) convenience functions.\n\n## request()\n\n`request()` convenience function. Similar to node core's\n[`http.request()`](http://nodejs.org/docs/latest/api/http.html#http_http_request_options_callback),\nexcept it returns an `icecast.Client` instance.\n\n## get()\n\n`get()` convenience function. Similar to node core's\n[`http.get()`](http://nodejs.org/docs/latest/api/http.html#http_http_get_options_callback),\nexcept it returns an `icecast.Client` instance with `.end()` called on it and\nno request body written to it (the most common scenario).\n\n## Reader()\n\nIcecast stream reader. This is a duplex stream that emits \"metadata\" events in\naddition to stripping out the metadata itself from the output data. The result\nis clean (audio and/or video) data coming out of the stream.\n\n## Writer()\n\nThe `Writer` class is a duplex stream that accepts raw audio/video data and\npasses it through untouched. It also has a `queue()` function that will\nqueue the Writer to inject the metadata into the stream at the next \"metaint\"\ninterval.\n\n### Writer#queue(metadata)\n\nQueues a piece of metadata to be sent along with the stream.\n`metadata` may be a String and be any title (up to 4066 chars),\nor may be an Object containing at least a \"StreamTitle\" key, with a String\nvalue. The serialized metadata payload must be <= 4080 bytes.\n\n## parse()\n\nParses a Buffer (or String) containing Icecast metadata into an Object.\n\n## stringify()\n\nTakes an Object and converts it into an Icecast metadata string.\n\n[NodeJS]: http://nodejs.org\n[Icecast]: http://icecast.org\n[SHOUTcast]: http://www.shoutcast.com\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/TooTallNate/node-icecast/issues"
  },
  "_id": "icecast@1.3.1",
  "dist": {
    "shasum": "90ce47086bf5bf9c8b280f0db941b1be23f3cbc9",
    "tarball": "http://registry.npmjs.org/icecast/-/icecast-1.3.1.tgz"
  },
  "_from": "icecast@",
  "_npmVersion": "1.3.8",
  "_npmUser": {
    "name": "tootallnate",
    "email": "nathan@tootallnate.net"
  },
  "maintainers": [
    {
      "name": "tootallnate",
      "email": "nathan@tootallnate.net"
    }
  ],
  "directories": {},
  "_shasum": "90ce47086bf5bf9c8b280f0db941b1be23f3cbc9",
  "_resolved": "https://registry.npmjs.org/icecast/-/icecast-1.3.1.tgz"
}
